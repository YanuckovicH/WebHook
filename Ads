const SPREADSHEET_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTM_zxGOTUVcyLqtkTURUizM4bPRM_gkGBRCOzjPnUVE-b_z5tUuT1GrcB19t5hFHrflgWUa9T2j910/pub?output=csv";
const START_DATE = Utilities.formatDate(new Date(), AdsApp.currentAccount().getTimeZone(), 'yyyyMMdd');

function main() {
  Logger.log("Script has started...");
  
  const allowedWords = fetchAllowedWordsFromCSV();
  Logger.log(`Allowed words fetched: ${allowedWords.length} words`);

  const searchTermsReport = AdsApp.report(
    `SELECT Query, AdGroupId, CampaignId, Impressions, Clicks, Date
     FROM SEARCH_QUERY_PERFORMANCE_REPORT
     WHERE Impressions > 0 AND Date >= '${START_DATE}'`
  );
  Logger.log("Report generated successfully.");

  const rows = searchTermsReport.rows();

  if (!rows.hasNext()) {
    Logger.log("No rows found in the report.");
    return;
  }

  const reviewLog = [];
  
  while (rows.hasNext()) {
    const row = rows.next();
    Logger.log(`Processing query: ${row['Query']}`);

    const query = row['Query'];
    const adGroupId = row['AdGroupId'];
    const campaignId = row['CampaignId'];

    const uniqueWords = Array.from(new Set(query.split(/\s+/)));
    const hasUnallowedWords = uniqueWords.some(word => !allowedWords.includes(word.toLowerCase()));

    if (hasUnallowedWords) {
      Logger.log(`Unallowed words found in query: ${query}`);
      reviewLog.push({ query, adGroupId, campaignId });
    }
  }

  logReviewItems(reviewLog);
  addNegativeKeywordsExactMatch(reviewLog);
}

function fetchAllowedWordsFromCSV() {
  const response = UrlFetchApp.fetch(SPREADSHEET_CSV_URL);
  const csvData = response.getContentText();
  const rows = csvData.split("\n");
  return rows.map(row => row.trim().toLowerCase()).filter(Boolean);
}

function logReviewItems(log) {
  if (log.length === 0) {
    Logger.log("No new negative keywords to review.");
    return;
  }

  Logger.log("The following search terms are suggested for negative keywords:");
  log.forEach(item => {
    Logger.log(`Query: "${item.query}", AdGroupId: ${item.adGroupId}, CampaignId: ${item.campaignId}`);
  });
}

function addNegativeKeywordsExactMatch(log) {
  if (log.length === 0) {
    Logger.log("No negative keywords to add.");
    return;
  }

  log.forEach(item => {
    const adGroup = AdsApp.adGroups().withIds([item.adGroupId]).get().next();
    if (adGroup) {
      adGroup.createNegativeKeyword(`[${item.query}]`);
      Logger.log(`Added negative keyword (exact match): [${item.query}] to Ad Group ID: ${item.adGroupId}`);
    }
  });
}
