// URL опубликованной Google Таблицы в формате CSV
const SPREADSHEET_CSV_URL = "https://docs.google.com/spreadsheets/d/e/2PACX-1vTM_zxGOTUVcyLqtkTURUizM4bPRM_gkGBRCOzjPnUVE-b_z5tUuT1GrcB19t5hFHrflgWUa9T2j910/pub?output=csv";

function main() {
  try {
    Logger.log("Starting main function...");
    const allowedWords = fetchAllowedWordsFromCSV();
    Logger.log(`Allowed words fetched: ${allowedWords.length}`);

    const reviewLog = [];
    Logger.log("Fetching search terms report...");

    const searchTermsReport = AdsApp.report(
      `SELECT Query, AdGroupId, CampaignId, Impressions, Clicks
       FROM SEARCH_QUERY_PERFORMANCE_REPORT
       WHERE Impressions > 0`
    );

    const rows = searchTermsReport.rows();
    Logger.log("Processing search terms...");

    while (rows.hasNext()) {
      const row = rows.next();
      const query = row['Query'];
      const adGroupId = row['AdGroupId'];
      const campaignId = row['CampaignId'];

      const uniqueWords = Array.from(new Set(query.split(/\s+/)));
      const hasUnallowedWords = uniqueWords.some(word => !allowedWords.includes(word.toLowerCase()));

      if (hasUnallowedWords) {
        reviewLog.push({
          query: query,
          adGroupId: adGroupId,
          campaignId: campaignId
        });
      }
    }

    logReviewItems(reviewLog);
    addNegativeKeywords(reviewLog);
    Logger.log("Main function completed successfully.");
  } catch (e) {
    Logger.log(`Error in main function: ${e.message}`);
    Logger.log(`Stack trace: ${e.stack}`);
  }
}

function fetchAllowedWordsFromCSV() {
  try {
    Logger.log("Fetching allowed words from CSV...");
    const response = UrlFetchApp.fetch(SPREADSHEET_CSV_URL);
    const csvData = response.getContentText();
    const rows = csvData.split("\n");
    return rows.map(row => row.trim().toLowerCase()).filter(Boolean);
  } catch (e) {
    Logger.log(`Error fetching allowed words: ${e.message}`);
    return [];
  }
}

function logReviewItems(log) {
  if (log.length === 0) {
    Logger.log("No new negative keywords to review.");
    return;
  }

  log.forEach(item => {
    Logger.log(`Query: "${item.query}", AdGroupId: ${item.adGroupId}, CampaignId: ${item.campaignId}`);
  });
}

function addNegativeKeywords(log) {
  if (log.length === 0) {
    Logger.log("No negative keywords to add.");
    return;
  }

  log.forEach(item => {
    const adGroup = AdsApp.adGroups().withIds([item.adGroupId]).get().next();
    if (adGroup) {
      adGroup.createNegativeKeyword(`"${item.query}"`);
      Logger.log(`Added negative keyword: "${item.query}"`);
    }
  });
}

// Автоматический вызов main()
main();
